from random import choice

def StartGrid(board):
    #Start Grid by reading in from a file
    print("Grid Start")
    for i in range(8):
        for j in range(8):
            board[i][j] = choice(['S', 'M', 'I', 'L', 'E'])

def InitalizeBoard(board):
    #Start Game(initalize)
    #Initialize Grid
    StartGrid(board)
    #Global Variable For Score
    global score
    score = 0
    #Globoal Variable For Turn
    global turn
    turn = 1




def ContinueGame(current_score, goal_score = 100):
    #Return false if game should end, true if continue
    if (current_score >= goal_score):
        return False
    else:
        return True


def CreateBoard(board):
    #Display the board to the screen
    linetodraw=""
    #draw some blank lines first
    print("\n\n\n")
    print(" ------------------------------------")

    for i in range(7, -1, -1):
        #Draw each row
        linetodraw=""
        for j in range (8):
            linetodraw += " | " + board[i][j]
        linetodraw+= " |"
        print(linetodraw)
        print(" -------------------------------------")
    print("  a    b   c   d   e   f   g   h")
    global score
    print("Your Current Score: ", score)

def GoodMove(move):
    if len(move) != 3:
        return False

    #Check that the space and direction are vaild moves
    if not (move[0] in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']):
        return False
    if not (move[1] in ['1', '2', '3', '4', '5', '6', '7', '8']):
        return False
    if not (move[2] in ['u', 'd', 'l', 'r']):
        return False

    if (move[0] == 'a') and (move[2] == 'l'):
        return False
    if (move[0] == 'h') and (move[2] == 'r'):
        return False
    if (move[1] == 'l') and (move[2] == 'd'):
        return False
    if (move[1] == '8') and (move[2] == 'u'):
        return False

    return True

def InputMove():
    #Get Move from user
    print("Enter a move by typing the space and direction (u, d, l, r). Spaces Should list column then row")


    move = input("Enter move: ")

    while not GoodMove(move):
        move = input("Silly, You Cant Move That Off The Screen! Try Again")

    return move

def SwitchPieces(board, move):
    # Swap pieces on board according to move
    #Get original position
    origrow = int(move[1])-1
    origcol = ConvertLetterToCol(move[0])
    #Get adjacent position
    if move[2] == 'u':
        newrow = origrow + 1
        newcol = origcol
    elif move[2] == 'd':
        newrow = origrow - 1
        newcol = origcol
    elif move[2] == 'l':
        newrow = origrow
        newcol = origcol - 1
    elif move[2] == 'r':
        newrow = origrow
        newcol = origcol + 1
    #swap objects in two positions
    temp = board[origrow][origcol]
    board[origrow][origcol] = board[newrow][newcol]
    board[newrow][newcol] = temp


def RemovePieces(board):
    # Remove 3 in a row and 3 in a column pieces
    remove  = [[0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]]
    #Go through rows
    for i in range(8):
        for j in range(6):
            if (board[i][j] == board[i][j+1]) and (board[i][j] == board[i][j+2]):
                remove[i][j] = 1;
                remove[i][j+1] = 1;
                remove[i][j+2] = 1;
       #Go Through Columns
        for j in range(8):
            for i in range(6):
                if (board[i][j] == board[i+1][j]) and (board[i][j] == board[i+2][j]):
                    #Three In A Row Here
                    remove[i][j] = 1;
                    remove[i+1][j] = 1;
                    remove[i+2][j] =1;
        global score
        removed_any = False
        for i in range(8):
            for j in range(8):
                if remove[i][j] == 1:
                    board[i][j] = 0
                    score += 1
                    removed_any = True
        return removed_any
    print("Removing pieces")
    return False


def ReplacePieces(board):
    # drop pieces to fill in blanks
    for j in range(8):
    #make list of pieces in the column
        listofpieces = []
        for i in range(8):
            if board[i][j] != 0:
                listofpieces.append(board[i][j])
        for i in range(len(listofpieces)) :
            board[i][j] = listofpieces[i]
        #fill in remainder of column with 0s
        for i in range(len(listofpieces), 8):
            board[i][j] = 0



def FillInBlanks(board):
    # Fill blanks with random pieces
    for i in range(8):
        for j in range(8):
            if (board[i][j] == 0):
                board[i][j] = choice(['S', 'M', 'I', 'L', 'E'])


def Update(board, move):
    #Update the board according to move
    SwitchPieces(board, move)
    pieces_eliminated = True
    while pieces_eliminated:
        pieces_eliminated = RemovePieces(board)
        RemovePieces(board)
        FillInBlanks(board)

def ConvertLetterToCol(Col):
    if Col == 'a':
        return 0
    elif Col =='b':
        return 1
    elif Col == 'c':
        return 2
    elif Col == 'd':
        return 3
    elif Col == 'e':
        return 4
    elif Col == 'f':
        return 5
    elif Col == 'g':
        return 6
    elif Col == 'h':
        return 7
    else:
        #not a valid column
        return -1



def DoRound(board):
    #Perform one round of game
    #Display current board
    CreateBoard(board)
    #Get Move
    move = InputMove()
    #Update board
    Update(board, move)
    #Update Turn number
    global turn
    turn += 1


score = 100
turn = 100
goalscore = 100

    #2D Array As Board
board = [[0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0]]



#Start Game
InitalizeBoard(board)
#Loop while game not over



#While Game Not Over
while ContinueGame(score, goalscore):
    #Do a round of the game
    DoRound(board)
